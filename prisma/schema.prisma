generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model athletes {
  id              Int             @id @default(autoincrement())
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  number          String          @db.VarChar(2)
  name            String          @db.VarChar(50)
  birthdate       DateTime?
  fpbNumber       Int?
  idNumber        Int?
  idType          String?         @db.VarChar(50)
  active          Boolean?        @default(true)
  athleteReport   athleteReport[]
  reviewedAthlete athleteReport[] @relation("reviewedAthlete")
  gameAthletes    gameAthletes[]
  statistics      statistic[]
  timeEntry       timeEntry[]
}

model gameAthletes {
  gameId    Int
  athleteId Int
  number    String?
  period1   Boolean?
  period2   Boolean?
  period3   Boolean?
  period4   Boolean?
  athlete   athletes @relation(fields: [athleteId], references: [id], onDelete: Cascade)
  game      games    @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@id([gameId, athleteId])
}

model games {
  id                  Int             @id @default(autoincrement())
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  number              Int?
  date                DateTime
  away                Boolean
  competition         String?         @db.VarChar(30)
  subcomp             String?         @db.VarChar(30)
  oponentId           Int
  notes               String?         @db.VarChar(1000)
  teamLostDefRebounds Int             @default(0)
  athleteReports      athleteReport[]
  gameAthletes        gameAthletes[]
  oponent             teams           @relation(fields: [oponentId], references: [id])
  objectives          objectives[]    @relation("objectives")
  statistics          statistic[]
  timeEntry           timeEntry[]
}

model settings {
  id              Int     @id
  teamName        String  @db.VarChar(50)
  shortName       String? @db.VarChar(6)
  season          String? @db.VarChar(10)
  homeLocation    String? @db.VarChar(30)
  image           String?
  backgroundColor String? @db.VarChar(7)
  foregroundColor String? @db.VarChar(7)
}

model teams {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime
  name      String   @db.VarChar(50)
  shortName String   @db.VarChar(6)
  location  String   @db.VarChar(30)
  image     String?
  games     games[]
}

model User {
  id        Int      @id @default(autoincrement())
  name      String?  @db.VarChar(100)
  email     String   @unique @db.VarChar(100)
  password  String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model statistic {
  id                Int      @id @default(autoincrement())
  gameId            Int
  athleteId         Int
  freeThrowScored   Int      @default(0)
  freeThrowMissed   Int      @default(0)
  fieldGoalScored   Int      @default(0)
  fieldGoalMissed   Int      @default(0)
  threePtsScored    Int      @default(0)
  threePtsMissed    Int      @default(0)
  assists           Int      @default(0)
  defensiveRebounds Int      @default(0)
  offensiveRebounds Int      @default(0)
  blocks            Int      @default(0)
  steals            Int      @default(0)
  turnovers         Int      @default(0)
  fouls             Int      @default(0)
  totalRebounds     Int      @default(0)
  athlete           athletes @relation(fields: [athleteId], references: [id])
  game              games    @relation(fields: [gameId], references: [id])

  @@unique([gameId, athleteId])
}

model timeEntry {
  id          Int      @id @default(autoincrement())
  gameId      Int
  athleteId   Int
  period      Int
  entryMinute Int
  entrySecond Int
  exitMinute  Int?
  exitSecond  Int?
  athlete     athletes @relation(fields: [athleteId], references: [id], onDelete: Cascade)
  game        games    @relation(fields: [gameId], references: [id], onDelete: Cascade)

  @@index([gameId, athleteId, period])
}

model athleteReport {
  id                    Int       @id @default(autoincrement())
  gameId                Int
  athleteId             Int
  teamObservation       String?   @db.VarChar(2000)
  individualObservation String?   @db.VarChar(2000)
  timePlayedObservation String?   @db.VarChar(2000)
  createdAt             DateTime  @default(now())
  reviewedAthleteId     Int?
  athlete               athletes  @relation(fields: [athleteId], references: [id], onDelete: Cascade)
  game                  games     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  reviewedAthlete       athletes? @relation("reviewedAthlete", fields: [reviewedAthleteId], references: [id], onDelete: Cascade)

  @@unique([gameId, athleteId])
  @@index([gameId, athleteId])
}

model macrocycle {
  id         Int         @id @default(autoincrement())
  startDate  DateTime
  endDate    DateTime
  notes      String?     @db.VarChar(1000)
  number     Int?
  name       String?
  mesocycles mesocycle[]
}

model mesocycle {
  id           Int          @id @default(autoincrement())
  startDate    DateTime
  endDate      DateTime
  notes        String?      @db.VarChar(1000)
  macrocycleId Int
  number       Int?
  name         String?
  macrocycle   macrocycle   @relation(fields: [macrocycleId], references: [id])
  microcycles  microcycle[]
}

model microcycle {
  id           Int           @id @default(autoincrement())
  notes        String?       @db.VarChar(1000)
  mesocycleId  Int
  number       Int?
  name         String?
  endDate      DateTime
  startDate    DateTime
  mesocycle    mesocycle     @relation(fields: [mesocycleId], references: [id])
  sessionGoals sessionGoal[]
}

model sessionGoal {
  id           Int        @id @default(autoincrement())
  duration     Int
  note         String?    @db.VarChar(1000)
  coach        String     @db.VarChar(255)
  microcycleId Int
  date         DateTime
  order        Int
  microcycle   microcycle @relation(fields: [microcycleId], references: [id], onDelete: Cascade)
}

model objectives {
  id          Int           @id @default(autoincrement())
  title       String        @db.VarChar(255)
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  gameId      Int
  type        objectiveType
  game        games         @relation("objectives", fields: [gameId], references: [id], onDelete: Cascade)
}

model Drill {
  id        Int      @id @default(autoincrement())
  name      String?
  svg       String
  createdAt DateTime @default(now())
}

enum objectiveType {
  OFFENSIVE
  DEFENSIVE
  TEAM
  INDIVIDUAL
}

enum TeamType {
  A
  B
}
